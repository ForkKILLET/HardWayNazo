{"version":3,"sources":["main.js"],"names":["queue","l","noop","canSetImmediate","prompt","title","require","ev","$","source","JSON","appendTo","stopPropagation","length","shift","fn","replace","n","push","window","out","c","process","on","addListener","slice","off","removeListener","setTimeout","emit","b","name","s","esc","cwd","Error","3","GetIntrinsic","callBind","intrinsic","$indexOf","$l","./","4","module","exports","bind","$call","d","html","parse","call","$apply","words","sigBytes","$max","console","o","$defineProperty","value","f","e","originalFunction","func","$reflectApply","arguments","$gOPD","configurable","$body","append","dft","jump","applyBind","apply","function-bind","$in","val","ascend","answer","factory","define","amd","cryptojs"],"mappings":"gcAUIA,E,mBA8BFC,SAACC,K,wIArCDC,E,2CAMFC,GACIJ,EAAA,GAVJK,OACMC,iBAAAA,UAMN,SAAAC,GAQQC,IAAEC,EAfVF,EAAAE,OAKSC,IAAAA,QAAAA,OAAAA,GAATC,iBAASD,EAAAA,OAGJH,EAAAK,kBARL,EA0BKZ,EA1BLa,QAAAb,EAAAc,OA2BUC,MAK6BC,GAI7BC,SAAIF,GANPf,EAAAkB,KAAAH,GAONI,OAAAC,YAAuCH,eAAAA,OAAvC,SAAAF,GACIM,WAAJN,EAAA,KADuCE,EAAAA,MAAAA,U,aAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,GAFvBK,EAAAC,GAAArB,EAQfoB,EAAAE,YAAaC,E,SAREH,EAAAI,IAAAxB,EAAAoB,EAAAK,eAAAzB,EAAA0B,EAAAA,mBAAA1B,EAAAoB,EAAAO,KAAA3B,EAMf4B,EAAAA,QAAA,SAAAC,GAEAC,MAAAA,IAAAA,MAAAC,qCAReX,EAAAY,IAAA,WAAA,MAAA,K,oBAAA,MAAA,IAAAC,MAAA,oCAAA,IAAAC,EAAA,CAAA,SAUsBR,EAAAA,EAAAA,gBAPtC,IAAAS,EAAA/B,EAAA,iBAQGgC,EAAAhC,EAAA,MAToCW,EAAAA,EAAAA,EAAAA,6BAAAA,EAAAA,QAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAPjC,MAAA,mBAAAsB,IAAA,EAAAC,EAAAT,EAAA,e,KAsBHU,IAWH,CAAAC,KAAO,EAAGrB,gBAAV,KAAAsB,EAAA,CAAA,SAAArC,EAAAsC,EAAAC,gBAlBE,IAAAC,EAAAxC,EAAA,iBAAA+B,EAAA/B,EAAA,iB,kCAAAyC,EAAAV,EAAA,6BADDW,EAUQC,EAVR,mBATeC,IAAAJ,EASfK,KAyBEJ,EAAAK,GAAQC,EAAAA,EAAO,qCAAT,GAAyBC,EAAUjB,EAAA,2BAAA,GAAnCkB,EAAAlB,EAAA,cA9BQmB,GAAAA,EAgBhBC,IApBeC,EAAA,GAAA,IAAA,CAAAC,MAAA,IAAAC,MAAAC,G,OAuBjBjB,EAAAC,QAAA,SAAAiB,GAAA,IAbGC,EAqCGC,EAAIlB,EAAaC,EAAUkB,W,OApBjCC,GAAAR,GACCQ,EAAAH,EAAA,UAsBCI,cApBAT,EAAAK,E,SAyBFK,CAAMC,MAAN,EAAAd,EAAA,EAAAO,EAAAjD,QAAAoD,UAAApD,OAAA,M,GAsDK,SAAHyD,I,0BAGAZ,EAAad,EAAP2B,QAAY,QAAA,CAAAZ,MAAAa,IAEjB5B,EAFDC,QAAA4B,MAAAD,GAIc,CAAAE,gBAAWC,GAAIC,gBAAYC,KAAOC,EAAAA,CAAAA,SAAlCxE,EAAAsC,EAAAC,GAAA,IACTrC,EAACuE,EAADvE,OAACuE,ygEAEN,iBAAAlC,E,yFAIqB,mBAAAmC,QAAAA,OAAAC,IAAUC,OAAAA,CAAQ,SAARA,eAAAA,QAAAA,WAAAA,iBAAAA","file":"bundle.js","sourcesContent":["const\n$\t\t\t= require(\"jquery\"),\ncryptojs\t= require(\"crypto-js\"),\nqs\t\t\t= require(\"qs\")\n\nlet lv\t= JSON.parse($(\"nazo\").html())\n\nconst\ndebug\t= location.hostname == \"localhost\",\nprompt\t= debug ? \"%\" : \"#\",\npath\t= location.pathname.slice(debug ? 1 : 13)\n\t.replace(/\\..+?$/, \"\") ?? \"index\",\ntitle\t= lv.id + prompt + \" \" + path\n\nconst\n$body\t= $(\"body\"),\n$title\t= $(`<title>${title} | HardWayNazo</title>`).appendTo($(\"head\")),\n$main\t= $(`\n<main>\n\t<h1>${title}</h1>\n\t<p class=\"hint\"></p>\n\t<p class=\"note\"></p>\n\t<p class=\"play\"></p>\n</main>\n`).appendTo($body),\n$hint\t= $(\".hint\"),\n$note\t= $(\".note\"),\n$play\t= $(\".play\")\n\nconst\nesc = s => s\n\t.replace(/ /g, \"&nbsp;\")\n\t.replace(/\\^\\^(#[\\da-f]+);(.+?)\\^\\^/, (_, color, txt) =>\n\t\t`<span style=\"color: ${color}\">${txt}</span>`)\n\t.replace(/\\*\\*(.+?)\\*\\*/g, \"<b>$1</b>\"),\nout = (n, $t) => {\n\tif (! lv[n]) return\n\tconst { text: t, typewriter: tw } = lv[n]\n\tlet c = 0, b = 0\n\tfor (let l of t) {\n\t\tl += \" \"\n\t\tlet m = l[0] == \"!\",\n\t\t\t$l = $(m ? `<code></code>` : `<p></p>`).appendTo($t)\n\t\tif (m) l = l.slice(1)\n\t\tif (tw)\n\t\t\tfor (let i = 0; i < l.length; i ++) setTimeout(() => {\n\t\t\t\tlet s = $l.html()\n\t\t\t\tif (l.slice(i - 1, i + 1) == \"**\") b ++\n\t\t\t\telse if (b == 2) {\n\t\t\t\t\tb = 0\n\t\t\t\t\ts = esc(s)\n\t\t\t\t}\n\t\t\t\t$l.html(s + l[i])\n\t\t\t}, ++ c * tw)\n\t\telse $l.html(esc(l))\n\t}\n}\n\nconst\nc = lv.crypto ?? {},\nq = Object.entries(qs.parse(location.search.slice(1)))\n\nif (q.length) {\n\tconst t = c[q[0][0]]\n\tif (typeof t === \"string\") {\n\t\tlet f = true, d, o\n\t\ttry {\n\t\t\td = cryptojs.AES.decrypt(\n\t\t\t\tt, cryptojs.enc.Utf8.parse(q[0][1]),\n\t\t\t\t{ iv: { words: [ 0, 0, 0, 0 ], sigBytes: 16 } }\n\t\t\t).toString(cryptojs.enc.Utf8)\n\t\t\tconsole.log(d)\n\t\t\to = JSON.parse(d)\n\t\t}\n\t\tcatch {\n\t\t\tf = false\n\t\t}\n\t\tif (f) {\n\t\t\tlv = o\n\t\t\tlv.crypto = c\n\t\t}\n\t}\n\telse if (typeof t === \"object\") { \n\t// Note: Pass when `t === null`.\n\t// Debug: Directly access `.c_html` files.\n\t\tlv = t\n\t\tlv.crypto = c\n\t}\n}\n\n$body.append(`\n<style>\nh1 {\n\tfont-size: 70px;\n\ttext-align: center;\n}\np {\n\tfont-family: serif;\n}\ncode {\n\tdisplay: block;\n\tfont-family:\n\t\t'Fira Code', consolas,\n\t\t'Courier New', Courier, monospace;\n}\n.hint {\n\tfont-size: 26px !important;\n\ttext-align: ${ lv.hint.align ?? \"center\" };\n}\n.note {\n\tposition: fixed;\n\tbottom: 40px;\n\tright: 5px;\n\twidth: 100%;\n\n\tfont-size: 20px !important;\n\ttext-align: ${ lv.note?.align ?? \"right\" };\n}\n.play {\n\ttext-align: center;\n}\n.play input, .play button {\n\tmargin: 0 5px;\n\n\tbackground-color: white;\n\tfont-size: 30px;\n\ttext-align: center;\n\n\tborder: 2px solid black;\n\tborder-radius: 5px;\n\toutline: none;\n}\n.play input:focus, .play button:active, .play button:hover {\n\tborder-style: dashed;\n}\n</style>\n`)\n\nout(\"hint\", $hint)\nout(\"note\", $note)\n\nlet dft = lv.ascend.default ?? \"\"\nswitch (lv.ascend.method) {\n\tcase \"crypto\":\n\t\tdft += `?${ lv.ascend.token }=`\n\tcase \"input\":\n\t\tconst $in = $(`<input />`).appendTo($play).val(dft)\n\t\tconst jump = f => {\n\t\t\tif (f) location.href = (debug ? \"/\" : \"/HardWayNazo/\") + $in.val()\n\t\t}\n\t\tif (lv.ascend.answer) $in\n\t\t\t.on(\"input\", () => jump($in.val() == lv.ascend.answer))\n\t\telse $(`<button>Nazo!</button>`).appendTo($play)\n\t\t\t.on(\"click\", jump)\n\t\tbreak\n}\n\nif (debug)\n\tObject.assign(window, { lv, qs, cryptojs })\n\n"]}